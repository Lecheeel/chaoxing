---
alwaysApply: false
---
# Flask开发规范和最佳实践

## Flask应用结构

### 应用初始化
参考主应用文件 [app.py](mdc:app.py) 和Web面板 [webpanel/app.py](mdc:webpanel/app.py)：

```python
from flask import Flask
from flask_sqlalchemy import SQLAlchemy
from flask_login import LoginManager

def create_app():
    """应用工厂函数"""
    app = Flask(__name__)
    
    # 配置
    app.config.from_object('config.Config')
    
    # 扩展初始化
    db.init_app(app)
    login_manager.init_app(app)
    
    # 蓝图注册
    from webpanel.blueprints.api import api_bp
    from webpanel.blueprints.sign import sign_bp
    app.register_blueprint(api_bp)
    app.register_blueprint(sign_bp)
    
    return app
```

### 蓝图使用规范
参考 [webpanel/blueprints/](mdc:webpanel/blueprints/) 目录结构：

```python
from flask import Blueprint, render_template, request, jsonify

# 创建蓝图
api_bp = Blueprint('api', __name__, url_prefix='/api')

@api_bp.route('/users', methods=['GET'])
def get_users():
    """获取用户列表"""
    try:
        users = get_all_users()
        return jsonify({
            'success': True,
            'data': users,
            'message': '获取用户列表成功'
        })
    except Exception as e:
        return jsonify({
            'success': False,
            'message': str(e)
        }), 500
```

## 路由设计规范

### RESTful API设计
```python
# ✅ 正确：RESTful路由设计
@api_bp.route('/users', methods=['GET'])          # 获取用户列表
@api_bp.route('/users', methods=['POST'])         # 创建用户
@api_bp.route('/users/<int:user_id>', methods=['GET'])    # 获取特定用户
@api_bp.route('/users/<int:user_id>', methods=['PUT'])    # 更新用户
@api_bp.route('/users/<int:user_id>', methods=['DELETE']) # 删除用户

# ❌ 错误：非RESTful设计
@api_bp.route('/get_users')
@api_bp.route('/create_user')
@api_bp.route('/delete_user')
```

### 视图函数规范
```python
@sign_bp.route('/manual', methods=['GET', 'POST'])
def manual_sign():
    """手动签到页面"""
    if request.method == 'GET':
        # 显示签到页面
        users = get_active_users()
        return render_template('sign/manual.html', users=users)
    
    elif request.method == 'POST':
        # 处理签到请求
        try:
            data = request.get_json()
            result = process_sign_request(data)
            
            return jsonify({
                'success': True,
                'data': result,
                'message': '签到请求已提交'
            })
        except Exception as e:
            return jsonify({
                'success': False,
                'message': str(e)
            }), 400
```

## 数据处理规范

### 请求数据验证
```python
from flask import request
from marshmallow import Schema, fields, ValidationError

class UserSchema(Schema):
    phone = fields.Str(required=True, validate=lambda x: re.match(r'^1[3-9]\d{9}$', x))
    password = fields.Str(required=True, min_length=6)
    name = fields.Str(required=False)

@api_bp.route('/users', methods=['POST'])
def create_user():
    """创建用户"""
    try:
        # 数据验证
        schema = UserSchema()
        data = schema.load(request.get_json())
        
        # 业务逻辑
        user = create_user_record(data)
        
        return jsonify({
            'success': True,
            'data': user.to_dict(),
            'message': '用户创建成功'
        }), 201
        
    except ValidationError as e:
        return jsonify({
            'success': False,
            'message': '数据验证失败',
            'errors': e.messages
        }), 400
    except Exception as e:
        return jsonify({
            'success': False,
            'message': str(e)
        }), 500
```

### 响应格式统一
```python
def success_response(data=None, message="操作成功", status_code=200):
    """成功响应格式"""
    response = {
        'success': True,
        'message': message
    }
    if data is not None:
        response['data'] = data
    return jsonify(response), status_code

def error_response(message="操作失败", status_code=400, errors=None):
    """错误响应格式"""
    response = {
        'success': False,
        'message': message
    }
    if errors:
        response['errors'] = errors
    return jsonify(response), status_code

# 使用示例
@api_bp.route('/users/<int:user_id>', methods=['GET'])
def get_user(user_id):
    user = get_user_by_id(user_id)
    if not user:
        return error_response("用户不存在", 404)
    
    return success_response(user.to_dict(), "获取用户成功")
```

## 错误处理规范

### 全局错误处理
```python
from flask import Flask, jsonify, render_template

def register_error_handlers(app):
    """注册全局错误处理器"""
    
    @app.errorhandler(404)
    def not_found_error(error):
        if request.path.startswith('/api/'):
            return jsonify({
                'success': False,
                'message': '接口不存在'
            }), 404
        return render_template('errors/404.html'), 404
    
    @app.errorhandler(500)
    def internal_error(error):
        db.session.rollback()
        if request.path.startswith('/api/'):
            return jsonify({
                'success': False,
                'message': '服务器内部错误'
            }), 500
        return render_template('errors/500.html'), 500
    
    @app.errorhandler(ValidationError)
    def validation_error(error):
        return jsonify({
            'success': False,
            'message': '数据验证失败',
            'errors': error.messages
        }), 400
```

### 日志记录
```python
import logging
from flask import current_app

def log_user_action(action, user_id=None, details=None):
    """记录用户操作日志"""
    logger = logging.getLogger('user_actions')
    log_data = {
        'action': action,
        'user_id': user_id,
        'ip_address': request.remote_addr,
        'user_agent': request.headers.get('User-Agent'),
        'timestamp': datetime.now().isoformat()
    }
    if details:
        log_data['details'] = details
    
    logger.info(f"用户操作: {action}", extra=log_data)

# 使用示例
@api_bp.route('/users/<int:user_id>', methods=['DELETE'])
def delete_user(user_id):
    try:
        user = get_user_by_id(user_id)
        if not user:
            return error_response("用户不存在", 404)
        
        # 记录删除操作
        log_user_action('delete_user', user_id, {'user_phone': user.phone})
        
        delete_user_record(user_id)
        return success_response(message="用户删除成功")
        
    except Exception as e:
        current_app.logger.error(f"删除用户失败: {e}", exc_info=True)
        return error_response("删除用户失败", 500)
```

## 配置管理

### 配置类设计
```python
import os
from flask import Flask

class Config:
    """基础配置"""
    SECRET_KEY = os.environ.get('SECRET_KEY') or 'dev-secret-key'
    SQLALCHEMY_DATABASE_URI = os.environ.get('DATABASE_URL') or 'sqlite:///app.db'
    SQLALCHEMY_TRACK_MODIFICATIONS = False
    
    # 日志配置
    LOG_LEVEL = os.environ.get('LOG_LEVEL') or 'INFO'
    LOG_FILE = os.environ.get('LOG_FILE') or 'logs/app.log'

class DevelopmentConfig(Config):
    """开发环境配置"""
    DEBUG = True
    SQLALCHEMY_DATABASE_URI = 'sqlite:///dev.db'

class ProductionConfig(Config):
    """生产环境配置"""
    DEBUG = False
    SQLALCHEMY_DATABASE_URI = os.environ.get('DATABASE_URL')

# 配置字典
config = {
    'development': DevelopmentConfig,
    'production': ProductionConfig,
    'default': DevelopmentConfig
}
```

### 环境变量使用
```python
# ✅ 正确：使用环境变量
app.config['SECRET_KEY'] = os.environ.get('SECRET_KEY')
app.config['DATABASE_URL'] = os.environ.get('DATABASE_URL')

# ❌ 错误：硬编码敏感信息
app.config['SECRET_KEY'] = 'hardcoded-secret-key'
app.config['DATABASE_URL'] = 'sqlite:///app.db'
```

## 数据库操作规范

### 模型定义
```python
from flask_sqlalchemy import SQLAlchemy
from datetime import datetime

db = SQLAlchemy()

class User(db.Model):
    """用户模型"""
    __tablename__ = 'users'
    
    id = db.Column(db.Integer, primary_key=True)
    phone = db.Column(db.String(11), unique=True, nullable=False, index=True)
    password = db.Column(db.String(128), nullable=False)
    name = db.Column(db.String(50))
    is_active = db.Column(db.Boolean, default=True)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    
    def to_dict(self):
        """转换为字典格式"""
        return {
            'id': self.id,
            'phone': self.phone,
            'name': self.name,
            'is_active': self.is_active,
            'created_at': self.created_at.isoformat(),
            'updated_at': self.updated_at.isoformat()
        }
    
    def __repr__(self):
        return f'<User {self.phone}>'
```

### 查询操作
```python
# ✅ 正确：使用查询方法
def get_user_by_phone(phone):
    return User.query.filter_by(phone=phone).first()

def get_active_users():
    return User.query.filter_by(is_active=True).all()

def search_users(keyword):
    return User.query.filter(
        db.or_(
            User.phone.contains(keyword),
            User.name.contains(keyword)
        )
    ).all()

# ❌ 错误：直接执行SQL
def get_user_by_phone(phone):
    result = db.engine.execute(f"SELECT * FROM users WHERE phone = '{phone}'")
    return result.fetchone()
```

## 安全检查

### CSRF保护
```python
from flask_wtf.csrf import CSRFProtect

csrf = CSRFProtect()

def init_app(app):
    csrf.init_app(app)
    
    # 排除API接口的CSRF保护
    csrf.exempt('api.*')
```

### 输入验证
```python
from wtforms import Form, StringField, PasswordField, validators

class UserForm(Form):
    phone = StringField('手机号', [
        validators.Required(message='手机号不能为空'),
        validators.Regexp(r'^1[3-9]\d{9}$', message='手机号格式不正确')
    ])
    password = PasswordField('密码', [
        validators.Required(message='密码不能为空'),
        validators.Length(min=6, message='密码至少6位')
    ])
    name = StringField('姓名', [
        validators.Length(max=50, message='姓名不能超过50个字符')
    ])
```

## 性能优化

### 数据库查询优化
```python
# ✅ 正确：使用索引和限制
def get_users_paginated(page=1, per_page=20):
    return User.query.filter_by(is_active=True)\
                    .order_by(User.created_at.desc())\
                    .paginate(page=page, per_page=per_page, error_out=False)

# ✅ 正确：避免N+1查询
def get_users_with_activities():
    return db.session.query(User)\
                    .options(db.joinedload(User.activities))\
                    .all()
```

### 缓存使用
```python
from flask_caching import Cache

cache = Cache()

@cache.memoize(timeout=300)  # 缓存5分钟
def get_user_stats():
    """获取用户统计信息"""
    return {
        'total_users': User.query.count(),
        'active_users': User.query.filter_by(is_active=True).count()
    }
```

## 测试规范

### 单元测试
```python
import unittest
from app import create_app, db
from app.models import User

class TestUserAPI(unittest.TestCase):
    
    def setUp(self):
        self.app = create_app('testing')
        self.app_context = self.app.app_context()
        self.app_context.push()
        db.create_all()
        self.client = self.app.test_client()
    
    def tearDown(self):
        db.session.remove()
        db.drop_all()
        self.app_context.pop()
    
    def test_create_user(self):
        """测试创建用户"""
        response = self.client.post('/api/users', json={
            'phone': '13812345678',
            'password': '123456',
            'name': '测试用户'
        })
        
        self.assertEqual(response.status_code, 201)
        data = response.get_json()
        self.assertTrue(data['success'])
        self.assertEqual(data['data']['phone'], '13812345678')
    
    def test_create_user_duplicate_phone(self):
        """测试重复手机号"""
        # 先创建一个用户
        user = User(phone='13812345678', password='123456')
        db.session.add(user)
        db.session.commit()
        
        # 尝试创建重复手机号的用户
        response = self.client.post('/api/users', json={
            'phone': '13812345678',
            'password': '123456'
        })
        
        self.assertEqual(response.status_code, 400)
```

## 部署规范

### 应用工厂模式
```python
# app.py
from flask import Flask
from config import config

def create_app(config_name='default'):
    app = Flask(__name__)
    app.config.from_object(config[config_name])
    
    # 初始化扩展
    db.init_app(app)
    
    # 注册蓝图
    from webpanel.blueprints import register_blueprints
    register_blueprints(app)
    
    return app

if __name__ == '__main__':
    app = create_app()
    app.run()
```

### WSGI配置
```python
# wsgi.py
import os
from app import create_app

app = create_app(os.environ.get('FLASK_ENV', 'production'))

if __name__ == '__main__':
    app.run()
```