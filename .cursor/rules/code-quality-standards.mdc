---
alwaysApply: false
---
# 代码质量和最佳实践规范

## 代码风格规范

### Python代码规范
- **PEP 8**: 遵循Python官方代码风格指南
- **命名规范**: 
  - 变量和函数: `snake_case`
  - 类名: `PascalCase`
  - 常量: `UPPER_CASE`
- **导入顺序**: 标准库 → 第三方库 → 本地模块
- **行长度**: 最大88字符（Black格式化器标准）

### JavaScript代码规范
- **ES6+语法**: 优先使用现代JavaScript特性
- **命名规范**:
  - 变量和函数: `camelCase`
  - 常量: `UPPER_CASE`
  - 私有变量: 前缀下划线 `_privateVar`
- **异步处理**: 优先使用 `async/await` 而非 Promise链

### HTML/CSS规范
- **语义化HTML**: 使用合适的HTML标签
- **CSS类命名**: BEM方法论或Bootstrap约定
- **缩进**: 2个空格（HTML/CSS/JS统一）

## 错误处理规范

### Python错误处理
```python
# ✅ 正确：具体异常处理
try:
    result = risky_operation()
except SpecificException as e:
    logger.error(f"具体错误: {e}")
    return error_response("操作失败")
except Exception as e:
    logger.error(f"未知错误: {e}")
    return error_response("系统错误")

# ❌ 错误：过于宽泛的异常捕获
try:
    result = risky_operation()
except:
    pass  # 静默忽略错误
```

### JavaScript错误处理
```javascript
// ✅ 正确：Promise错误处理
async function fetchData() {
    try {
        const response = await fetch('/api/data');
        if (!response.ok) {
            throw new Error(`HTTP ${response.status}`);
        }
        return await response.json();
    } catch (error) {
        console.error('获取数据失败:', error);
        showToast('获取数据失败', 'error');
        throw error;
    }
}

// ✅ 正确：Ajax错误处理
$.ajax({
    url: '/api/action',
    method: 'POST',
    success: function(response) {
        if (response.success) {
            showToast(response.message, 'success');
        } else {
            showToast(response.message, 'error');
        }
    },
    error: function(xhr, status, error) {
        console.error('Ajax错误:', error);
        showToast('网络请求失败', 'error');
    }
});
```

## 性能优化规范

### 前端性能
- **资源压缩**: CSS/JS文件使用压缩版本
- **懒加载**: 图片和大型组件使用懒加载
- **缓存策略**: 合理设置静态资源缓存
- **代码分割**: 大型JS文件按需加载

### 后端性能
- **数据库查询**: 避免N+1查询问题
- **缓存机制**: 合理使用内存缓存
- **异步处理**: 耗时操作使用异步处理
- **连接池**: 数据库连接使用连接池

## 安全性规范

### 输入验证
```python
# ✅ 正确：输入验证
def validate_phone(phone):
    if not phone or not isinstance(phone, str):
        raise ValueError("手机号不能为空")
    
    if not re.match(r'^1[3-9]\d{9}$', phone):
        raise ValueError("手机号格式不正确")
    
    return phone.strip()
```

### SQL注入防护
```python
# ✅ 正确：参数化查询
cursor.execute("SELECT * FROM users WHERE phone = %s", (phone,))

# ❌ 错误：字符串拼接
cursor.execute(f"SELECT * FROM users WHERE phone = '{phone}'")
```

### XSS防护
```javascript
// ✅ 正确：文本内容处理
function displayMessage(message) {
    const element = document.getElementById('message');
    element.textContent = message;  // 自动转义HTML
}

// ❌ 错误：直接插入HTML
element.innerHTML = userInput;  // 可能导致XSS
```

## 日志记录规范

### Python日志
```python
import logging

logger = logging.getLogger(__name__)

# ✅ 正确：结构化日志
logger.info("用户登录成功", extra={
    'user_id': user.id,
    'ip_address': request.remote_addr,
    'timestamp': datetime.now().isoformat()
})

# ✅ 正确：错误日志包含上下文
try:
    risky_operation()
except Exception as e:
    logger.error(f"操作失败: {e}", exc_info=True, extra={
        'operation': 'risky_operation',
        'user_id': getattr(current_user, 'id', None)
    })
```

### JavaScript日志
```javascript
// ✅ 正确：分级日志
console.log('信息日志:', data);
console.warn('警告日志:', warning);
console.error('错误日志:', error);

// ✅ 正确：生产环境日志控制
if (process.env.NODE_ENV === 'development') {
    console.debug('调试信息:', debugData);
}
```

## 测试规范

### 单元测试
```python
import unittest
from unittest.mock import patch, MagicMock

class TestUserService(unittest.TestCase):
    
    def setUp(self):
        self.user_service = UserService()
    
    def test_validate_phone_valid(self):
        """测试有效手机号验证"""
        result = self.user_service.validate_phone("13812345678")
        self.assertTrue(result)
    
    def test_validate_phone_invalid(self):
        """测试无效手机号验证"""
        with self.assertRaises(ValueError):
            self.user_service.validate_phone("123")
    
    @patch('requests.post')
    def test_api_call(self, mock_post):
        """测试API调用"""
        mock_post.return_value.json.return_value = {'success': True}
        result = self.user_service.call_api()
        self.assertTrue(result)
```

### 前端测试
```javascript
// ✅ 正确：函数测试
describe('formatDateTime', function() {
    it('应该正确格式化日期', function() {
        const date = new Date('2024-01-01T12:00:00');
        const formatted = formatDateTime(date);
        expect(formatted).toBe('2024-01-01 12:00:00');
    });
    
    it('应该处理无效日期', function() {
        const formatted = formatDateTime('invalid');
        expect(formatted).toBe('--');
    });
});
```

## 文档规范

### 函数文档
```python
def process_user_data(user_data, validate=True):
    """
    处理用户数据
    
    Args:
        user_data (dict): 用户数据字典
        validate (bool): 是否验证数据，默认为True
    
    Returns:
        dict: 处理后的用户数据
    
    Raises:
        ValueError: 当数据验证失败时
        TypeError: 当输入类型不正确时
    
    Example:
        >>> data = {'name': '张三', 'phone': '13812345678'}
        >>> result = process_user_data(data)
        >>> print(result['name'])
        张三
    """
    if validate and not user_data:
        raise ValueError("用户数据不能为空")
    
    # 处理逻辑...
    return processed_data
```

### JavaScript函数文档
```javascript
/**
 * 显示Toast消息
 * @param {string} message - 消息内容
 * @param {string} type - 消息类型 (success, error, warning, info)
 * @param {number} duration - 显示时长（毫秒），默认3000
 * @returns {void}
 * 
 * @example
 * showToast('操作成功', 'success');
 * showToast('发生错误', 'error', 5000);
 */
function showToast(message, type = 'info', duration = 3000) {
    // 实现逻辑...
}
```

## 代码审查检查清单

在提交代码前，请确认：
- [ ] 代码遵循项目风格规范
- [ ] 所有函数都有适当的文档
- [ ] 错误处理完整且有意义
- [ ] 没有硬编码的敏感信息
- [ ] 性能关键代码有优化
- [ ] 安全性考虑充分
- [ ] 测试覆盖率足够
- [ ] 日志记录适当
- [ ] 没有调试代码残留
- [ ] 代码可读性和可维护性良好